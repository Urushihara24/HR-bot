import logging
import os
import re
from typing import Dict

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
# pip install python-telegram-bot[job-queue] --pre
# pip install pandas openpyxl python-dotenv
import pandas as pd
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    PicklePersistence,
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è —Ç–æ–∫–µ–Ω–∞)
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MENU,
    ASK_EXPERIENCE,
    ASK_CITIZENSHIP,
    ASK_FIO,
    ASK_AGE,
    ASK_CITY,
    ASK_PHONE,
    CONFIRM_DATA,
    VACANCIES_LIST,
    VACANCY_DESCRIPTION,
    ADMIN_MENU,
    DELETE_ID,
    SEND_MESSAGE,
) = range(13)

# –ê–¥–º–∏–Ω-IDs (–∏—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
ADMIN_IDS = {1481790360, 196597371}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
EXCEL_FILE = "hr_responses.xlsx"

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel ---

def init_excel():
    """–°–æ–∑–¥–∞–µ—Ç Excel-—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not os.path.exists(EXCEL_FILE):
        df = pd.DataFrame(columns=[
            'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–û–ø—ã—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï', '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ', '–§–ò–û', '–í–æ–∑—Ä–∞—Å—Ç', '–ì–æ—Ä–æ–¥', '–¢–µ–ª–µ—Ñ–æ–Ω'
        ])
        df.to_excel(EXCEL_FILE, index=False)
        logger.info(f"–§–∞–π–ª {EXCEL_FILE} —Å–æ–∑–¥–∞–Ω.")

def save_to_excel(user_id: int, data: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel."""
    try:
        df = pd.read_excel(EXCEL_FILE)
        new_row = {
            'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user_id,
            '–û–ø—ã—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï': data.get('experience'),
            '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ': data.get('citizenship'),
            '–§–ò–û': data.get('fio'),
            '–í–æ–∑—Ä–∞—Å—Ç': data.get('age'),
            '–ì–æ—Ä–æ–¥': data.get('city'),
            '–¢–µ–ª–µ—Ñ–æ–Ω': data.get('phone')
        }
        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
        df.to_excel(EXCEL_FILE, index=False)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {e}")


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = [
        [KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton("üíº –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π")],
    ]
    if update.effective_user.id in ADMIN_IDS:
        keyboard.append([KeyboardButton("üîê –ê–¥–º–∏–Ω–∫–∞")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    return MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    context.user_data.clear()
    await main_menu(update, context)
    return MENU

# --- –õ–æ–≥–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        context.user_data.clear()
        keyboard = [
            [KeyboardButton("–î–ê"), KeyboardButton("–ù–ï–¢")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        await update.message.reply_text(
            "‚ùì –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_EXPERIENCE

    elif text == "üíº –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π":
        keyboard = [
            [KeyboardButton("üöö –í–æ–¥–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï")],
            [KeyboardButton("üì¶ –í–æ–¥–∏—Ç–µ–ª—å-—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        await update.message.reply_text("üíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return VACANCIES_LIST

    elif text == "üîê –ê–¥–º–∏–Ω–∫–∞" and user_id in ADMIN_IDS:
        keyboard = [
            [KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã")],
            [KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ADMIN_MENU

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        return MENU

# --- –õ–æ–≥–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ---

async def ask_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        context.user_data.clear()
        await main_menu(update, context)
        return MENU

    if text.upper() not in ["–î–ê", "–ù–ï–¢"]:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–ê' –∏–ª–∏ '–ù–ï–¢'.")
        return ASK_EXPERIENCE

    context.user_data['experience'] = text.upper()
    keyboard = [
        [KeyboardButton("–†–æ—Å—Å–∏—è"), KeyboardButton("–°–ù–ì"), KeyboardButton("–î—Ä—É–≥–æ–µ")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    await update.message.reply_text("üåç –ö–∞–∫–æ–µ —É –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ASK_CITIZENSHIP

async def ask_citizenship(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [[KeyboardButton("–î–ê"), KeyboardButton("–ù–ï–¢")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
        await update.message.reply_text(
            "‚ùì –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_EXPERIENCE

    if text not in ["–†–æ—Å—Å–∏—è", "–°–ù–ì", "–î—Ä—É–≥–æ–µ"]:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '–†–æ—Å—Å–∏—è', '–°–ù–ì' –∏–ª–∏ '–î—Ä—É–≥–æ–µ'.")
        return ASK_CITIZENSHIP

    context.user_data['citizenship'] = text
    keyboard = [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ASK_FIO

async def ask_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [[KeyboardButton("–†–æ—Å—Å–∏—è"), KeyboardButton("–°–ù–ì"), KeyboardButton("–î—Ä—É–≥–æ–µ")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        await update.message.reply_text("üåç –ö–∞–∫–æ–µ —É –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ASK_CITIZENSHIP

    if len(text) < 5:
        await update.message.reply_text("‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return ASK_FIO

    context.user_data['fio'] = text
    keyboard = [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text("üéÇ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ASK_AGE

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ASK_FIO

    if not text.isdigit() or not (16 <= int(text) <= 100):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 100).")
        return ASK_AGE

    context.user_data['age'] = int(text)
    keyboard = [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text("üèô –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ASK_CITY

async def ask_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        await update.message.reply_text("üéÇ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ASK_AGE

    if len(text) < 2:
        await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return ASK_CITY

    context.user_data['city'] = text
    keyboard = [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
    await update.message.reply_text("üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567):", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ASK_PHONE

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        await update.message.reply_text("üèô –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ASK_CITY

    phone_pattern = r'^(\+7|8)\d{10}$'
    if not re.match(phone_pattern, text):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +79991234567")
        return ASK_PHONE

    context.user_data['phone'] = text
    await show_confirmation(update, context)
    return CONFIRM_DATA

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã ---

async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = context.user_data
    message = (
        "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üî∏ –û–ø—ã—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï: {data['experience']}\n"
        f"üî∏ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {data['citizenship']}\n"
        f"üî∏ –§–ò–û: {data['fio']}\n"
        f"üî∏ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üî∏ –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üî∏ –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    keyboard = [
        [KeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButton("üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    await update.message.reply_text(message, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–Ω–æ–≤–æ."""
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        save_to_excel(user_id, context.user_data)
        await update.message.reply_text(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
        await main_menu(update, context)
        return MENU

    elif text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        context.user_data.clear()
        keyboard = [[KeyboardButton("–î–ê"), KeyboardButton("–ù–ï–¢")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
        await update.message.reply_text(
            "üîÑ –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.\n‚ùì –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_EXPERIENCE

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        context.user_data.clear()
        await main_menu(update, context)
        return MENU

    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ' –∏–ª–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'.")
        return CONFIRM_DATA

# --- –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–∞–∫–∞–Ω—Å–∏–π ---

async def handle_vacancy_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏."""
    text = update.message.text.strip()
    vacancy_info = {
        "üöö –í–æ–¥–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï": (
            "üöö –í–æ–¥–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï\n\n"
            "üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï\n"
            "- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–∞–ª—å–Ω–∏–º –ø–æ–µ–∑–¥–∫–∞–º\n\n"
            "üíº –ó–∞—Ä–ø–ª–∞—Ç–∞: –æ—Ç 120 000 —Ä—É–±.\n"
            "üìç –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        ),
        "üì¶ –í–æ–¥–∏—Ç–µ–ª—å-—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä": (
            "üì¶ –í–æ–¥–∏—Ç–µ–ª—å-—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä\n\n"
            "üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–º\n"
            "- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å\n\n"
            "üíº –ó–∞—Ä–ø–ª–∞—Ç–∞: –æ—Ç 100 000 —Ä—É–±.\n"
            "üìç –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: –ú–æ—Å–∫–≤–∞, —Ä–µ–≥–∏–æ–Ω—ã"
        )
    }

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await main_menu(update, context)
        return MENU

    if text in vacancy_info:
        description = vacancy_info[text] + "\n\nüì© –•–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è?"
        keyboard = [[KeyboardButton("‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
        await update.message.reply_text(description, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return VACANCY_DESCRIPTION

    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return VACANCIES_LIST

async def handle_vacancy_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—è –Ω–∞ –∞–Ω–∫–µ—Ç—É."""
    text = update.message.text.strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [
            [KeyboardButton("üöö –í–æ–¥–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï"), KeyboardButton("üì¶ –í–æ–¥–∏—Ç–µ–ª—å-—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        await update.message.reply_text("üíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return VACANCIES_LIST

    elif text == "‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è":
        context.user_data.clear()
        keyboard = [[KeyboardButton("–î–ê"), KeyboardButton("–ù–ï–¢")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É.\n\n"
            "‚ùì –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ASK_EXPERIENCE # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã

    else:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' –∏–ª–∏ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.")
        return VACANCY_DESCRIPTION

# --- –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---

async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    text = update.message.text.strip()
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return MENU

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await main_menu(update, context)
        return MENU

    elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã":
        await view_all_ankets(update, context)
        return ADMIN_MENU

    elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–∫–µ—Ç—É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
        return DELETE_ID

    elif text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await update.message.reply_text("üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º, –∫—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É:")
        return SEND_MESSAGE

    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")
        return ADMIN_MENU


async def view_all_ankets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞."""
    if update.effective_user.id not in ADMIN_IDS:
        return MENU
    try:
        df = pd.read_excel(EXCEL_FILE)
        if df.empty:
            await update.message.reply_text("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.")
            return ADMIN_MENU

        for index, row in df.iterrows():
            anketa_text = (
                f"üë§ –ê–Ω–∫–µ—Ç–∞ #{index + 1}\n"
                f"ID: {row['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']}\n"
                f"–§–ò–û: {row['–§–ò–û']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {row['–í–æ–∑—Ä–∞—Å—Ç']}\n"
                f"–ì–æ—Ä–æ–¥: {row['–ì–æ—Ä–æ–¥']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {row['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
                f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {row['–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ']}\n"
                f"–û–ø—ã—Ç: {row['–û–ø—ã—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ï']}\n"
            )
            await update.message.reply_text(anketa_text)
    except FileNotFoundError:
        await update.message.reply_text(f"‚ùå –§–∞–π–ª {EXCEL_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç: {e}")
    return ADMIN_MENU


async def delete_id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
    if update.effective_user.id not in ADMIN_IDS:
        return MENU
    try:
        target_id = int(update.message.text.strip())
        df = pd.read_excel(EXCEL_FILE)
        initial_count = len(df)
        df = df[df['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'] != target_id]

        if len(df) < initial_count:
            df.to_excel(EXCEL_FILE, index=False)
            await update.message.reply_text(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"‚ùå –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    await main_menu(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
    return MENU


async def send_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã."""
    if update.effective_user.id not in ADMIN_IDS:
        return MENU

    message_text = update.message.text
    bot = context.bot
    try:
        df = pd.read_excel(EXCEL_FILE)
        unique_user_ids = df['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'].unique()
        sent_count, error_count = 0, 0

        for user_id in unique_user_ids:
            try:
                await bot.send_message(chat_id=int(user_id), text=message_text)
                sent_count += 1
            except Exception as e:
                error_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await update.message.reply_text(
            f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

    await main_menu(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
    return MENU


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    context.user_data.clear()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await main_menu(update, context)
    return MENU

# --- –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    init_excel()

    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≤ —Ñ–∞–π–ª–µ .env).")

    # –°–æ–∑–¥–∞–µ–º persistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    persistence = PicklePersistence(filepath="bot_data")

    application = (
        Application.builder()
        .token(TOKEN)
        .persistence(persistence)
        .build()
    )

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
            # –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
            ASK_EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_experience)],
            ASK_CITIZENSHIP: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_citizenship)],
            ASK_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_fio)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_city)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            CONFIRM_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_data)],
            # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
            VACANCIES_LIST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vacancy_selection)],
            VACANCY_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vacancy_response)],
            # –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏
            ADMIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_menu)],
            DELETE_ID: [MessageHandler(filters.TEXT, delete_id_handler)],
            SEND_MESSAGE: [MessageHandler(filters.TEXT, send_message_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", start)],
        persistent=True,
        name="main_conversation",
    )

    application.add_handler(conv_handler)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()

